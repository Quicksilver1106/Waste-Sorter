{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyM/a2O2TCKysPmAlZ1sRw/K"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import torch\n","import torchvision.models as models\n","\n","# Define the model\n","class MyModel(torch.nn.Module):\n","    def __init__(self):\n","        super(MyModel, self).__init__()\n","        self.features = models.vgg16(pretrained=True).features\n","        self.classifier = torch.nn.Sequential(\n","            torch.nn.Linear(25088, 4096),\n","            torch.nn.ReLU(inplace=True),\n","            torch.nn.Dropout(),\n","            torch.nn.Linear(4096, 4096),\n","            torch.nn.ReLU(inplace=True),\n","            torch.nn.Dropout(),\n","            torch.nn.Linear(4096, 2),\n","        )\n","\n","    def forward(self, x):\n","        x = self.features(x)\n","        x = torch.flatten(x, 1)\n","        x = self.classifier(x)\n","        return x\n","\n","# Load the model state dictionary\n","state_dict = torch.load(\"my_model.pth\", map_location=torch.device('cpu'))\n","\n","# Create a new model instance\n","model = MyModel()\n","\n","# Check if the state dictionary keys match with the model definition\n","model_dict = model.state_dict()\n","for k, v in state_dict.items():\n","    if k not in model_dict:\n","        print(f\"Unexpected key: {k}\")\n","    elif v.shape != model_dict[k].shape:\n","        print(f\"Mismatched shape for key {k}: model has shape {model_dict[k].shape}, while state_dict has shape {v.shape}\")\n","    else:\n","        model_dict[k] = v\n","\n","# Load the modified state dictionary to the model\n","model.load_state_dict(model_dict)\n","\n","# Load and preprocess the input image\n","image = Image.open(\"glass29.jpg\")\n","transform = transforms.Compose([\n","    transforms.Resize(256),\n","    transforms.CenterCrop(224),\n","    transforms.ToTensor(),\n","    transforms.Normalize(\n","        mean=[0.485, 0.456, 0.406],\n","        std=[0.229, 0.224, 0.225]\n","    )\n","])\n","image = transform(image).unsqueeze(0)\n","\n","# Run the image through the model and get the prediction\n","with torch.no_grad():\n","    output = model(image)\n","\n","# Print the predicted class\n","print(output.argmax(dim=1).item())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WBHy8Vd4HDQP","executionInfo":{"status":"ok","timestamp":1681968958233,"user_tz":-330,"elapsed":5936,"user":{"displayName":"Vishal Singh","userId":"13872698396068763525"}},"outputId":"bccd908f-c088-4e8b-d51d-198d2f904f27"},"execution_count":31,"outputs":[{"output_type":"stream","name":"stdout","text":["Unexpected key: fc1.weight\n","Unexpected key: fc1.bias\n","Unexpected key: fc2.weight\n","Unexpected key: fc2.bias\n","0\n"]}]}]}